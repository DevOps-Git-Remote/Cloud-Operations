# **📌 AWS IAM Policies - In-Depth Guide**  

## **🚀 What is an IAM Policy?**
An **IAM policy** is a JSON document that defines **permissions** for users, groups, and roles in AWS. It determines **who can do what** in AWS services.  

✅ **Key Concepts of IAM Policies:**  
- **Effect:** Allow or Deny actions.  
- **Action:** Specifies what operations can be performed.  
- **Resource:** Defines which AWS resources the policy applies to.  
- **Condition (Optional):** Adds restrictions based on time, IP address, MFA, etc.  

---

# **📌 Types of IAM Policies**
| **Policy Type** | **Description** | **Example Use Case** |
|---------------|----------------|-----------------|
| **Managed Policies** | Predefined policies by AWS or custom policies created by users | AWS `AdministratorAccess`, `ReadOnlyAccess` |
| **Inline Policies** | Policies embedded within an IAM user, group, or role | One-time, role-specific permissions |
| **Service Control Policies (SCPs)** | Apply permissions to AWS Organizations accounts | Restrict account-wide actions (e.g., deny S3 bucket deletion) |
| **Permissions Boundaries** | Set the maximum permissions for an IAM entity | Prevent IAM users from escalating privileges |
| **Session Policies** | Temporary permissions attached when assuming a role | Limit actions during a session |

---

# **📌 Basic IAM Policy Structure**
✅ Example JSON IAM Policy:  
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::my-bucket/*"
    }
  ]
}
```
📌 **Explanation:**  
- **Effect:** `"Allow"` – Grants permission.  
- **Action:** `"s3:GetObject"` – Allows reading objects from S3.  
- **Resource:** `"arn:aws:s3:::my-bucket/*"` – Grants access only to `my-bucket`.  

---

# **📌 Key Elements of an IAM Policy**
| **Element** | **Purpose** | **Example** |
|------------|------------|------------|
| **Version** | Specifies policy language version | `"Version": "2012-10-17"` |
| **Statement** | Main policy block containing rules | `[ { ... } ]` |
| **Effect** | Defines Allow or Deny | `"Effect": "Allow"` |
| **Action** | Specifies permitted AWS actions | `"s3:PutObject"` |
| **Resource** | Specifies AWS resources affected | `"arn:aws:s3:::my-bucket/*"` |
| **Condition** | Optional; applies restrictions | `"aws:MultiFactorAuthPresent": true` |

---

# **📌 Managed vs. Inline Policies**
| **Feature** | **AWS Managed Policy** | **Customer Managed Policy** | **Inline Policy** |
|------------|-------------------|-------------------|---------------|
| Created by AWS? | ✅ Yes | ❌ No | ❌ No |
| Can be attached to multiple users/roles? | ✅ Yes | ✅ Yes | ❌ No (One entity only) |
| Customizable? | ❌ No | ✅ Yes | ✅ Yes |
| Best for? | Common use cases | Custom access control | One-time special access |

✅ **Best Practice:** Use **AWS Managed Policies** when possible, but create **Customer Managed Policies** for specific access control.

---

# **📌 Common AWS Managed Policies**
| **Policy Name** | **Description** |
|---------------|----------------|
| **AdministratorAccess** | Full access to all AWS services |
| **PowerUserAccess** | Full access except for IAM & security settings |
| **ReadOnlyAccess** | View resources but cannot modify them |
| **AmazonS3FullAccess** | Full access to all S3 buckets |
| **AmazonEC2ReadOnlyAccess** | Read-only access to EC2 instances |

---

# **📌 Advanced IAM Policy Examples**

### **1️⃣ Allow Full Access to S3**
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::my-bucket/*"
    }
  ]
}
```
✅ Grants all actions (`s3:*`) on `my-bucket`.

---

### **2️⃣ Deny Deleting S3 Objects**
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Deny",
      "Action": "s3:DeleteObject",
      "Resource": "arn:aws:s3:::my-bucket/*"
    }
  ]
}
```
✅ Prevents users from deleting S3 objects.

---

### **3️⃣ Grant Access to an EC2 Instance in a Specific Region**
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ec2:StartInstances",
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "aws:RequestedRegion": "us-west-2"
        }
      }
    }
  ]
}
```
✅ Allows users to start EC2 instances **only in `us-west-2`**.

---

### **4️⃣ Enforce MFA for IAM Actions**
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Deny",
      "Action": "iam:*",
      "Resource": "*",
      "Condition": {
        "BoolIfExists": {
          "aws:MultiFactorAuthPresent": false
        }
      }
    }
  ]
}
```
✅ Denies IAM actions unless **MFA is enabled**.

---

# **📌 IAM Policy Best Practices**
✔ **Follow the Principle of Least Privilege** – Grant only necessary permissions.  
✔ **Use IAM Groups** – Assign permissions at a group level instead of per user.  
✔ **Enable MFA** – Require multi-factor authentication for sensitive actions.  
✔ **Use AWS Managed Policies for Standard Roles** – Reduces maintenance overhead.  
✔ **Regularly Review & Rotate Permissions** – Audit policies using AWS IAM Access Analyzer.  

---

# **🛠️ Hands-On: Creating a Custom IAM Policy**
### **Step 1: Create a Customer Managed Policy**
1️⃣ Go to **AWS IAM Console** → **Policies** → **Create Policy**.  
2️⃣ Choose **JSON** tab and paste the following policy:  
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::my-secure-bucket/*"
    }
  ]
}
```
3️⃣ Click **Review Policy** → Name it **`S3ReadWritePolicy`**.  
4️⃣ Click **Create Policy**.  

### **Step 2: Attach Policy to a User or Role**
1️⃣ Go to **IAM Console** → **Users or Roles**.  
2️⃣ Select the user/role → Click **Add Permissions**.  
3️⃣ Attach the **S3ReadWritePolicy**.  
4️⃣ Click **Save**.  

✅ This user/role can now **read and write** objects in `my-secure-bucket`.  

---

# **🎯 What’s Next?**
Would you like **hands-on labs** on:  
✅ Creating IAM roles with policies?  
✅ Using IAM policies in AWS CLI?  
✅ Applying SCPs in AWS Organizations?  

🚀 Let me know what you'd like to learn next!
