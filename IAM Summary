# **📌 AWS IAM (Identity and Access Management) - Complete Summary**  

## **🚀 What is AWS IAM?**
AWS **IAM (Identity and Access Management)** is a security service that helps control access to AWS resources. 
It allows you to manage **users, groups, roles, and policies** to enforce security best practices.  

✅ **Key Features:**  
- **Granular Access Control** – Control who can access what.  
- **Least Privilege Principle** – Grant only necessary permissions.  
- **Secure Authentication & Authorization** – Using users, groups, roles, and policies.  
- **Multi-Factor Authentication (MFA)** – Adds an extra layer of security.  
- **Auditing & Monitoring** – Logs all API calls via AWS CloudTrail.  

---

# **📌 Key IAM Components**  

| **Component** | **Description** | **Example** |
|-------------|---------------|-----------|
| **IAM Users** | Individual AWS identities with credentials | `john.doe` with S3 read access |
| **IAM Groups** | Collection of users with shared permissions | `Developers` with EC2 access |
| **IAM Roles** | Temporary permissions assumed by AWS services or users | Lambda function accessing S3 |
| **IAM Policies** | JSON documents defining permissions | Policy granting read/write access to S3 |
| **IAM Permissions Boundaries** | Limits maximum permissions for IAM entities | Prevents privilege escalation |
| **Service Control Policies (SCPs)** | Organization-wide restrictions for accounts | Prevents users from deleting S3 buckets |

---

# **📌 IAM Authentication Principles**  

| **Authentication Type** | **Purpose** | **Example** |
|----------------------|------------|------------|
| **Access Keys** | Used for programmatic access (CLI, SDKs) | `AKIAEXAMPLEKEY` |
| **IAM User Passwords** | Required for AWS Console login | `Admin123!` |
| **Multi-Factor Authentication (MFA)** | Adds extra security | OTP-based login |
| **Temporary Security Credentials** | Used for IAM Roles & STS (short-lived) | AssumeRole API for temporary access |

---

# **📌 IAM Users**  
An **IAM User** represents an individual identity within AWS.  
- Can **authenticate using passwords or access keys**.  
- Assigned permissions via **policies** (directly or through groups).  
- Cannot **assume roles** unless explicitly allowed.  

✅ **Best Practice:**  
- Use **IAM roles for applications** instead of long-lived access keys.  
- **Enable MFA** for all IAM users.  
- Assign permissions **through groups, not directly to users**.  

---

# **📌 IAM Groups**  
An **IAM Group** is a collection of IAM Users that share the same permissions.  
- Simplifies permission management.  
- Users **inherit** policies attached to the group.  
- **Best for Role-Based Access Control (RBAC)**.  

✅ **Best Practice:**  
- Use groups like **Admins, Developers, Support, Finance** for easier permission control.  
- Avoid assigning policies directly to users.  

---

# **📌 IAM Roles**  
An **IAM Role** is a set of temporary permissions assigned to a trusted entity.  
- Can be assumed by **AWS services, applications, or external users**.  
- Does **not require a password or access key**.  
- Uses **temporary security credentials** (via AWS Security Token Service - STS).  

✅ **Best Practice:**  
- Use IAM roles instead of access keys for applications.  
- Assign **minimal necessary permissions** to each role.  

---

# **📌 IAM Policies**  
IAM Policies are **JSON documents** that define permissions.  

### **Basic Policy Structure**  
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::my-bucket/*"
    }
  ]
}
```
📌 **Explanation:**  
- `"Effect": "Allow"` – Grants permission.  
- `"Action": "s3:GetObject"` – Allows reading objects from S3.  
- `"Resource": "arn:aws:s3:::my-bucket/*"` – Applies to `my-bucket`.  

✅ **Best Practices:**  
- Follow the **Principle of Least Privilege**.  
- Use **AWS Managed Policies** when possible.  
- Regularly **audit permissions** with AWS IAM Access Analyzer.  

---

# **📌 Types of IAM Policies**  
| **Policy Type** | **Description** | **Example** |
|---------------|----------------|-----------|
| **Managed Policies** | AWS-defined or user-created reusable policies | `AdministratorAccess`, `ReadOnlyAccess` |
| **Inline Policies** | Policies directly attached to a single user, group, or role | Custom one-off policy for a role |
| **Service Control Policies (SCPs)** | Organization-wide restrictions at AWS Organizations level | Prevent account-wide deletions |
| **Permissions Boundaries** | Restrict max permissions for IAM entities | Limit user from creating IAM roles |
| **Session Policies** | Temporary policies attached when assuming a role | Restricting actions during an STS session |

---

# **📌 IAM Best Practices**
✔ **Follow the Principle of Least Privilege** – Grant only necessary permissions.  
✔ **Use IAM Groups** – Assign permissions at the group level instead of per user.  
✔ **Enable MFA** – Require MFA for all users, especially with admin privileges.  
✔ **Use IAM Roles Instead of Access Keys** – Secure applications by using IAM roles.  
✔ **Rotate Credentials Regularly** – Change passwords and access keys periodically.  
✔ **Audit IAM Permissions** – Use AWS IAM Access Analyzer and AWS CloudTrail to monitor changes.  
✔ **Enforce Strong Password Policies** – Set minimum complexity requirements.  

---

# **📌 Hands-On: Creating IAM Components**
### **1️⃣ Creating an IAM User (AWS CLI)**
```sh
aws iam create-user --user-name DevUser
```
### **2️⃣ Adding a User to a Group**
```sh
aws iam add-user-to-group --user-name DevUser --group-name Developers
```
### **3️⃣ Creating an IAM Role for EC2**
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": { "Service": "ec2.amazonaws.com" },
      "Action": "sts:AssumeRole"
    }
  ]
}
```
```sh
aws iam create-role --role-name EC2S3Access --assume-role-policy-document file://trust-policy.json
```
### **4️⃣ Attaching a Policy to a Role**
```sh
aws iam attach-role-policy --role-name EC2S3Access --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
```

✅ Now, any EC2 instance with this role **can access S3 read-only**.  

---

# **📌 IAM Security Auditing**
✅ **Monitor IAM Activity with AWS CloudTrail**  
```sh
aws cloudtrail describe-trails
```
✅ **Check IAM User Activity**  
```sh
aws iam get-user --user-name DevUser
```
✅ **Identify Unused IAM Credentials**  
```sh
aws iam list-access-keys --user-name DevUser
```

---

# **📌 Summary**
✔ **IAM Users** – Individual AWS identities with credentials.  
✔ **IAM Groups** – Collection of users sharing the same permissions.  
✔ **IAM Roles** – Temporary permissions assumed by AWS services or external users.  
✔ **IAM Policies** – JSON-based rules defining what actions are allowed/denied.  
✔ **Security Best Practices** – Use MFA, least privilege, IAM roles, and audit permissions regularly.  

---

# **🎯 What’s Next?**
Would you like:  
✅ **Practice Questions for IAM concepts?**  
✅ **More Hands-on Labs with Terraform & AWS CLI?**  
✅ **IAM Security Scenarios & Use Cases?**  

🚀 Let me know what you'd like to learn next!
